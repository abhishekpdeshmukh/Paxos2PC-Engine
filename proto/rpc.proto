syntax = "proto3";
package rpc;

option go_package = "/";

import "google/protobuf/empty.proto";

service ClientServerConnection {
    rpc Kill(google.protobuf.Empty) returns (google.protobuf.Empty) {}
    rpc Revive(google.protobuf.Empty)returns(google.protobuf.Empty){}
    rpc TwoPCPrepare(ClientPrepare) returns (ClientPrepareResponse) {}
    rpc TwoPCCommit(ClientCommit) returns (google.protobuf.Empty) {}
    rpc TwoPCAbort(ClientAbort) returns (google.protobuf.Empty) {}
    rpc GetTransactions(google.protobuf.Empty) returns (GetTransactionsResponse);
    rpc GetBalances(GetBalancesRequest) returns (GetBalancesResponse);
    rpc ClearDB(google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc IntraShardTransaction(Transaction) returns (ClientTransactionResponse) {}
}
service PaxosService {
    rpc Prepare(PrepareRequest) returns (PromiseResponse){}
    rpc Accept(AcceptRequest) returns (AcceptedResponse){}
    rpc Commit(CommitRequest) returns (CommitedResponse){}
    // rpc RequestCommitBlock (CommitBlockRequest) returns (CommitBlockResponse){};
}




message GetTransactionsResponse {
    repeated TransactionLog transactions = 1;
}
message GetBalancesRequest {
    // Add filters if needed
    int64 shard_id = 1;
}

message GetBalancesResponse {
    BalanceEntry balances = 1;
}

message BalanceEntry {
    int64 shard_id = 1;
    int64 balance = 2;
}

message TransactionLog{
    int32 id =1;
    int32 sender = 2;
    int32 receiver = 3;
    int32 amount = 4;
    string status = 5;
}
message Ballot {
    int32 ballotNum = 1;
    int32 nodeID = 2;
}

message CommitRequest{
    // Ballot ballot_number =1;
    Transaction transaction =1;
}
message CommitedResponse {
    bool success = 1;
}
message PrepareRequest {
    Ballot ballot = 1;
    TransactionRequest transaction =2;
    int32 LogSize =3;
}

message PromiseResponse {
    
    Ballot ballot_number = 1;  // The ballot number n sent by the proposer
    Ballot accept_num = 2;     // The latest accepted ballot number
    repeated Transaction accept_val = 3;    // The latest accepted value (e.g., a set of transactions)
    int32 logsize =4;
    bool lag = 5;
    int32 server_id  = 6;
}

  message AcceptRequest {
    Ballot ballot = 1;  // The ballot number n for the proposal
    Transaction transaction =2;
    repeated Transaction MissingLogs =3;
     int32 MissingLogIdx = 4;          // The proposed value (e.g., a set of transactions)
}

message TransactionRequest{
    int32 Id =2;
    int32 From =3;
    int32 To =4;
    int32 Amount =5;
}
message AcceptedResponse {
    
    int32 proposalNumber = 1;  // The ballot number n for the proposal
    bool success = 2;          // Indicates whether the proposal was accepted
    int32 server_id = 3;
}

message Transaction {
    int32 id =1;
    int32 sender = 2;
    int32 receiver = 3;
    int32 amount = 4;
}

// Messages for 2PC protocol
message ClientPrepare {
    Transaction transaction = 1;
}

message ClientPrepareResponse {
    bool canCommit = 1;
}

message ClientCommit {
    bool success=1;
    Transaction transaction =2;
}

message ClientAbort {
    Transaction transaction =2;
}

// Response for intra-shard transaction
message ClientTransactionResponse {
    bool success = 1;
    string message = 2;
}


message WAL {
    int32 shard =1;
    int32 previousBalance =2;
    int32 latestBalance =3;
}