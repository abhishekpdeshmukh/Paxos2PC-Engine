// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: rpc.proto

package __

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientServerConnection_Kill_FullMethodName   = "/rpc.ClientServerConnection/Kill"
	ClientServerConnection_Revive_FullMethodName = "/rpc.ClientServerConnection/Revive"
)

// ClientServerConnectionClient is the client API for ClientServerConnection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServerConnectionClient interface {
	Kill(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Revive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type clientServerConnectionClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServerConnectionClient(cc grpc.ClientConnInterface) ClientServerConnectionClient {
	return &clientServerConnectionClient{cc}
}

func (c *clientServerConnectionClient) Kill(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ClientServerConnection_Kill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerConnectionClient) Revive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ClientServerConnection_Revive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServerConnectionServer is the server API for ClientServerConnection service.
// All implementations must embed UnimplementedClientServerConnectionServer
// for forward compatibility.
type ClientServerConnectionServer interface {
	Kill(context.Context, *empty.Empty) (*empty.Empty, error)
	Revive(context.Context, *empty.Empty) (*empty.Empty, error)
	mustEmbedUnimplementedClientServerConnectionServer()
}

// UnimplementedClientServerConnectionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientServerConnectionServer struct{}

func (UnimplementedClientServerConnectionServer) Kill(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedClientServerConnectionServer) Revive(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revive not implemented")
}
func (UnimplementedClientServerConnectionServer) mustEmbedUnimplementedClientServerConnectionServer() {
}
func (UnimplementedClientServerConnectionServer) testEmbeddedByValue() {}

// UnsafeClientServerConnectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServerConnectionServer will
// result in compilation errors.
type UnsafeClientServerConnectionServer interface {
	mustEmbedUnimplementedClientServerConnectionServer()
}

func RegisterClientServerConnectionServer(s grpc.ServiceRegistrar, srv ClientServerConnectionServer) {
	// If the following call pancis, it indicates UnimplementedClientServerConnectionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientServerConnection_ServiceDesc, srv)
}

func _ClientServerConnection_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerConnectionServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServerConnection_Kill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerConnectionServer).Kill(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServerConnection_Revive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerConnectionServer).Revive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServerConnection_Revive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerConnectionServer).Revive(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientServerConnection_ServiceDesc is the grpc.ServiceDesc for ClientServerConnection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientServerConnection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ClientServerConnection",
	HandlerType: (*ClientServerConnectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Kill",
			Handler:    _ClientServerConnection_Kill_Handler,
		},
		{
			MethodName: "Revive",
			Handler:    _ClientServerConnection_Revive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
