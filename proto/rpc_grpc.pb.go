// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: rpc.proto

package __

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientServerConnection_Kill_FullMethodName                  = "/rpc.ClientServerConnection/Kill"
	ClientServerConnection_Revive_FullMethodName                = "/rpc.ClientServerConnection/Revive"
	ClientServerConnection_TwoPCPrepare_FullMethodName          = "/rpc.ClientServerConnection/TwoPCPrepare"
	ClientServerConnection_TwoPCCommit_FullMethodName           = "/rpc.ClientServerConnection/TwoPCCommit"
	ClientServerConnection_TwoPCAbort_FullMethodName            = "/rpc.ClientServerConnection/TwoPCAbort"
	ClientServerConnection_GetTransactions_FullMethodName       = "/rpc.ClientServerConnection/GetTransactions"
	ClientServerConnection_GetBalances_FullMethodName           = "/rpc.ClientServerConnection/GetBalances"
	ClientServerConnection_ClearDB_FullMethodName               = "/rpc.ClientServerConnection/ClearDB"
	ClientServerConnection_IntraShardTransaction_FullMethodName = "/rpc.ClientServerConnection/IntraShardTransaction"
)

// ClientServerConnectionClient is the client API for ClientServerConnection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServerConnectionClient interface {
	Kill(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Revive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	TwoPCPrepare(ctx context.Context, in *ClientPrepare, opts ...grpc.CallOption) (*ClientPrepareResponse, error)
	TwoPCCommit(ctx context.Context, in *ClientCommit, opts ...grpc.CallOption) (*empty.Empty, error)
	TwoPCAbort(ctx context.Context, in *ClientAbort, opts ...grpc.CallOption) (*empty.Empty, error)
	GetTransactions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	GetBalances(ctx context.Context, in *GetBalancesRequest, opts ...grpc.CallOption) (*GetBalancesResponse, error)
	ClearDB(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	IntraShardTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*ClientTransactionResponse, error)
}

type clientServerConnectionClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServerConnectionClient(cc grpc.ClientConnInterface) ClientServerConnectionClient {
	return &clientServerConnectionClient{cc}
}

func (c *clientServerConnectionClient) Kill(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ClientServerConnection_Kill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerConnectionClient) Revive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ClientServerConnection_Revive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerConnectionClient) TwoPCPrepare(ctx context.Context, in *ClientPrepare, opts ...grpc.CallOption) (*ClientPrepareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientPrepareResponse)
	err := c.cc.Invoke(ctx, ClientServerConnection_TwoPCPrepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerConnectionClient) TwoPCCommit(ctx context.Context, in *ClientCommit, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ClientServerConnection_TwoPCCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerConnectionClient) TwoPCAbort(ctx context.Context, in *ClientAbort, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ClientServerConnection_TwoPCAbort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerConnectionClient) GetTransactions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, ClientServerConnection_GetTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerConnectionClient) GetBalances(ctx context.Context, in *GetBalancesRequest, opts ...grpc.CallOption) (*GetBalancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalancesResponse)
	err := c.cc.Invoke(ctx, ClientServerConnection_GetBalances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerConnectionClient) ClearDB(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ClientServerConnection_ClearDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerConnectionClient) IntraShardTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*ClientTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientTransactionResponse)
	err := c.cc.Invoke(ctx, ClientServerConnection_IntraShardTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServerConnectionServer is the server API for ClientServerConnection service.
// All implementations must embed UnimplementedClientServerConnectionServer
// for forward compatibility.
type ClientServerConnectionServer interface {
	Kill(context.Context, *empty.Empty) (*empty.Empty, error)
	Revive(context.Context, *empty.Empty) (*empty.Empty, error)
	TwoPCPrepare(context.Context, *ClientPrepare) (*ClientPrepareResponse, error)
	TwoPCCommit(context.Context, *ClientCommit) (*empty.Empty, error)
	TwoPCAbort(context.Context, *ClientAbort) (*empty.Empty, error)
	GetTransactions(context.Context, *empty.Empty) (*GetTransactionsResponse, error)
	GetBalances(context.Context, *GetBalancesRequest) (*GetBalancesResponse, error)
	ClearDB(context.Context, *empty.Empty) (*empty.Empty, error)
	IntraShardTransaction(context.Context, *Transaction) (*ClientTransactionResponse, error)
	mustEmbedUnimplementedClientServerConnectionServer()
}

// UnimplementedClientServerConnectionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientServerConnectionServer struct{}

func (UnimplementedClientServerConnectionServer) Kill(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedClientServerConnectionServer) Revive(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revive not implemented")
}
func (UnimplementedClientServerConnectionServer) TwoPCPrepare(context.Context, *ClientPrepare) (*ClientPrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwoPCPrepare not implemented")
}
func (UnimplementedClientServerConnectionServer) TwoPCCommit(context.Context, *ClientCommit) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwoPCCommit not implemented")
}
func (UnimplementedClientServerConnectionServer) TwoPCAbort(context.Context, *ClientAbort) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwoPCAbort not implemented")
}
func (UnimplementedClientServerConnectionServer) GetTransactions(context.Context, *empty.Empty) (*GetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedClientServerConnectionServer) GetBalances(context.Context, *GetBalancesRequest) (*GetBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalances not implemented")
}
func (UnimplementedClientServerConnectionServer) ClearDB(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearDB not implemented")
}
func (UnimplementedClientServerConnectionServer) IntraShardTransaction(context.Context, *Transaction) (*ClientTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntraShardTransaction not implemented")
}
func (UnimplementedClientServerConnectionServer) mustEmbedUnimplementedClientServerConnectionServer() {
}
func (UnimplementedClientServerConnectionServer) testEmbeddedByValue() {}

// UnsafeClientServerConnectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServerConnectionServer will
// result in compilation errors.
type UnsafeClientServerConnectionServer interface {
	mustEmbedUnimplementedClientServerConnectionServer()
}

func RegisterClientServerConnectionServer(s grpc.ServiceRegistrar, srv ClientServerConnectionServer) {
	// If the following call pancis, it indicates UnimplementedClientServerConnectionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientServerConnection_ServiceDesc, srv)
}

func _ClientServerConnection_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerConnectionServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServerConnection_Kill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerConnectionServer).Kill(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServerConnection_Revive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerConnectionServer).Revive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServerConnection_Revive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerConnectionServer).Revive(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServerConnection_TwoPCPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientPrepare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerConnectionServer).TwoPCPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServerConnection_TwoPCPrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerConnectionServer).TwoPCPrepare(ctx, req.(*ClientPrepare))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServerConnection_TwoPCCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientCommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerConnectionServer).TwoPCCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServerConnection_TwoPCCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerConnectionServer).TwoPCCommit(ctx, req.(*ClientCommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServerConnection_TwoPCAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientAbort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerConnectionServer).TwoPCAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServerConnection_TwoPCAbort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerConnectionServer).TwoPCAbort(ctx, req.(*ClientAbort))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServerConnection_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerConnectionServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServerConnection_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerConnectionServer).GetTransactions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServerConnection_GetBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerConnectionServer).GetBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServerConnection_GetBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerConnectionServer).GetBalances(ctx, req.(*GetBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServerConnection_ClearDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerConnectionServer).ClearDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServerConnection_ClearDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerConnectionServer).ClearDB(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServerConnection_IntraShardTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerConnectionServer).IntraShardTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServerConnection_IntraShardTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerConnectionServer).IntraShardTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientServerConnection_ServiceDesc is the grpc.ServiceDesc for ClientServerConnection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientServerConnection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ClientServerConnection",
	HandlerType: (*ClientServerConnectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Kill",
			Handler:    _ClientServerConnection_Kill_Handler,
		},
		{
			MethodName: "Revive",
			Handler:    _ClientServerConnection_Revive_Handler,
		},
		{
			MethodName: "TwoPCPrepare",
			Handler:    _ClientServerConnection_TwoPCPrepare_Handler,
		},
		{
			MethodName: "TwoPCCommit",
			Handler:    _ClientServerConnection_TwoPCCommit_Handler,
		},
		{
			MethodName: "TwoPCAbort",
			Handler:    _ClientServerConnection_TwoPCAbort_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _ClientServerConnection_GetTransactions_Handler,
		},
		{
			MethodName: "GetBalances",
			Handler:    _ClientServerConnection_GetBalances_Handler,
		},
		{
			MethodName: "ClearDB",
			Handler:    _ClientServerConnection_ClearDB_Handler,
		},
		{
			MethodName: "IntraShardTransaction",
			Handler:    _ClientServerConnection_IntraShardTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

const (
	PaxosService_Prepare_FullMethodName = "/rpc.PaxosService/Prepare"
	PaxosService_Accept_FullMethodName  = "/rpc.PaxosService/Accept"
	PaxosService_Commit_FullMethodName  = "/rpc.PaxosService/Commit"
)

// PaxosServiceClient is the client API for PaxosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaxosServiceClient interface {
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PromiseResponse, error)
	Accept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptedResponse, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitedResponse, error)
}

type paxosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaxosServiceClient(cc grpc.ClientConnInterface) PaxosServiceClient {
	return &paxosServiceClient{cc}
}

func (c *paxosServiceClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PromiseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromiseResponse)
	err := c.cc.Invoke(ctx, PaxosService_Prepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosServiceClient) Accept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptedResponse)
	err := c.cc.Invoke(ctx, PaxosService_Accept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosServiceClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitedResponse)
	err := c.cc.Invoke(ctx, PaxosService_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaxosServiceServer is the server API for PaxosService service.
// All implementations must embed UnimplementedPaxosServiceServer
// for forward compatibility.
type PaxosServiceServer interface {
	Prepare(context.Context, *PrepareRequest) (*PromiseResponse, error)
	Accept(context.Context, *AcceptRequest) (*AcceptedResponse, error)
	Commit(context.Context, *CommitRequest) (*CommitedResponse, error)
	mustEmbedUnimplementedPaxosServiceServer()
}

// UnimplementedPaxosServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaxosServiceServer struct{}

func (UnimplementedPaxosServiceServer) Prepare(context.Context, *PrepareRequest) (*PromiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedPaxosServiceServer) Accept(context.Context, *AcceptRequest) (*AcceptedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedPaxosServiceServer) Commit(context.Context, *CommitRequest) (*CommitedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedPaxosServiceServer) mustEmbedUnimplementedPaxosServiceServer() {}
func (UnimplementedPaxosServiceServer) testEmbeddedByValue()                      {}

// UnsafePaxosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaxosServiceServer will
// result in compilation errors.
type UnsafePaxosServiceServer interface {
	mustEmbedUnimplementedPaxosServiceServer()
}

func RegisterPaxosServiceServer(s grpc.ServiceRegistrar, srv PaxosServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaxosServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaxosService_ServiceDesc, srv)
}

func _PaxosService_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServiceServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaxosService_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServiceServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaxosService_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServiceServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaxosService_Accept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServiceServer).Accept(ctx, req.(*AcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaxosService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaxosService_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServiceServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaxosService_ServiceDesc is the grpc.ServiceDesc for PaxosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaxosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PaxosService",
	HandlerType: (*PaxosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _PaxosService_Prepare_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _PaxosService_Accept_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _PaxosService_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
